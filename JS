d3.json("https://raw.githubusercontent.com/FreeCodeCamp/ProjectReferenceData/master/cyclist-data.json", function(error, data) {
  if (error) throw error;
  if (data) { $('.chart').text(""); }
  var margin = {top: 20, right: 20, bottom: 30, left: 40},
      width = 960 - margin.left - margin.right,
      height = 500 - margin.top - margin.bottom;

  var svg = d3.select(".chart").append("svg")
  .attr("width", width + margin.left + margin.right)
  .attr("height", height + margin.top + margin.bottom)
  .append("g")
  .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  var formatMinutes = d3.time.format("%I:%M");

  var x = d3.time.scale()
  .domain([new Date(formatMinutes.parse(data[0].Time)), new Date(formatMinutes.parse(data[34].Time))])
  .range([0, width])
  .nice();

  var y = d3.scale.linear()
  .domain(d3.extent(data, function(d) { return d.Place; }))
  .range([height, 0])
  .nice();

  var color = d3.scale.category10();
  var xAxis = d3.svg.axis()
  .scale(x)
  .orient("bottom");

  var yAxis = d3.svg.axis()
  .scale(y)
  .orient("left");

  var tip = d3.tip()
  .attr('class', 'd3-tip')
  .offset([-10, 0])
  .html(function(d) {
    if (d.Doping) {
      dope = "<div class='sep'>Doping: " + d.Doping + "</div>";
    }else{
      dope = "";
    }

    return d.Name + " <span class='country'>" + d.Nationality + "</span><span class='year'>" + d.Year + "</span>" + dope;
  });
  
  svg.append("text")
    .attr("class", "svg-text")
    .attr("y", 20)
    .attr("x", 70)
    .text("Doping in Professional Bicycle Racing");
  
  svg.call(tip);

  svg.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + height + ")")
    .call(xAxis)
    .append("text")
    .attr("class", "label")
    .attr("x", width)
    .attr("y", -6)
    .style("text-anchor", "end")
    .text("Minutes Behind Fastest Time");

  svg.append("g")
    .attr("class", "y axis")
    .call(yAxis)
    .append("text")
    .attr("class", "label")
    .attr("transform", "rotate(-90)")
    .attr("y", 6)
    .attr("dy", ".71em")
    .style("text-anchor", "end")
    .text("Ranking");

  svg.selectAll(".dot")
    .data(data)
    .enter()
    .append("circle")
    .attr("class", "dot")
    .attr("r", 1) //Initial radius of circles
    .attr("cx", function(d) { return x(new Date(formatMinutes.parse(d.Time))); })
    .attr("cy", function(d) { return y(d.Place); })
    .style("fill", function(d) { 
    if (d.Doping.length > 1) {
      doping = "Riders with doping allegations";
    }
    else {
      doping = "No doping allegations";
    }
    return color(doping); 
  })
    .on('mouseover', tip.show)
    .on('mouseout', tip.hide);

  svg.selectAll("circle")
    .data(data) 
    .transition() 
    .ease("elastic")
    .ease(Math.sqrt)
    .delay(function(d){return d.Place * 100})
    .attr("r", function(d) {
    return Math.floor(Math.random() * (8 - 5 + 1) + 5)}) .each("end",function(d) {
    $(this).addClass('animated pulse').css('animation-duration', '5s').css('animation-delay','2s').css('animation-iteration-count','3');
  });

  var legend = svg.selectAll(".legend")
  .data(color.domain())
  .enter().append("g")
  .attr("class", "legend")
  .attr("transform", function(d, i) { return "translate(0," + i * 20 + ")"; });

  legend.append("rect")
    .attr("x", width - 18)
    .attr("y", height - 150)
    .attr("width", 18)
    .attr("height", 18)
    .style("fill", color);

  legend.append("text")
    .attr("x", width - 24)
    .attr("y", height - 145)
    .attr("dy", ".35em")
    .style("text-anchor", "end")
    .text(function(d) { return d; });

});
